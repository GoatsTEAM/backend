name: Deploy changed services

on:
  push:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      matrix-json: ${{ steps.matrix.outputs.json }}

    steps:
      - uses: actions/checkout@v4

      - name: Detect changed folders
        id: folders
        run: |
          folders=$(git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" \
                     | cut -d/ -f1 \
                     | sort -u \
                     | tr '\n' ' ')
          echo "list=$folders" >> "$GITHUB_OUTPUT"

      - name: Collect deploy configs â†’ matrix JSON
        id: matrix
        run: |
          pip install -q yq jq
          rows=()
          for dir in ${{ steps.folders.outputs.list }}; do
            cfg="$dir/deploy.yml"
            if [[ -f "$cfg" ]]; then
              svc=$(yq e '.service' "$cfg")
              cmp=$(yq e '.compose' "$cfg")
              rows+=("{\"service\":\"$svc\",\"compose\":\"$cmp\"}")
            fi
          done
          json=$(printf '%s\n' "${rows[@]}" | jq -cs '.')
          echo "json=$json" >> "$GITHUB_OUTPUT"

  deploy:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix-json != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix-json) }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Deploy ${{ matrix.service }}
        env:
          SSH_KEY:     ${{ secrets.ssh_key }}
          SERVER_IP:   ${{ secrets.server_ip }}
          SSH_USER:    ${{ secrets.deploy_user }}
          SVC_NAME:    ${{ matrix.service }}
          COMPOSE_DIR: ${{ matrix.compose }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts

          echo "ðŸ”§ Deploy $SVC_NAME (compose dir: $COMPOSE_DIR)"

          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" \
            bash -s -- "$SVC_NAME" "$COMPOSE_DIR" <<'EOSSH'
          set -euo pipefail
          svc="$1"
          cmp="$2"

          cd "$cmp"
          if docker compose config --services | grep -qx "$svc"; then
            echo "â–¶ building $svc"
            docker compose build "$svc"
            echo "â–¶ restarting $svc"
            docker compose up -d "$svc"
          else
            echo "âš  $svc not found in compose â€” skipped"
          fi
EOSSH
