name: Deploy changed services

on:
  push:
    branches: [ main ]         # –ø—É—à –∏ merge-commit –≤ main
  pull_request:
    branches: [ main ]         # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ merge PR

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    ##########################################################################
    # 1. –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    ##########################################################################
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0         # –Ω—É–∂–µ–Ω –≤–µ—Å—å git-–ª–æ–≥ –¥–ª—è diff

    ##########################################################################
    # 2. –í—ã—è—Å–Ω—è–µ–º, –∫–∞–∫–∏–µ –ø–∞–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã —ç—Ç–∏–º push / PR
    ##########################################################################
    - name: Detect changed folders
      id: folders
      run: |
        # –¥–∏–∞–ø–∞–∑–æ–Ω diff: –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–º–º–∏—Ç ‚Üí –Ω—ã–Ω–µ—à–Ω–∏–π HEAD
        range="$(git merge-base HEAD origin/main)..HEAD"
        folders=$(git diff --name-only $range \
                 | cut -d/ -f1 \
                 | sort -u \
                 | tr '\n' ' ')
        echo "folders=$folders" >>"$GITHUB_OUTPUT"

    ##########################################################################
    # 3. –ß–∏—Ç–∞–µ–º deploy.yaml –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–π –ø–∞–ø–∫–∏
    ##########################################################################
    - name: Collect deploy configs
      id: cfg
      run: |
        pip install -q yq                              # –ª—ë–≥–∫–∏–π YAML-–ø–∞—Ä—Å–µ—Ä
        services=() ; composes=()
        for dir in ${{ steps.folders.outputs.folders }}; do
          cfg="$dir/deploy.yaml"
          [[ -f "$cfg" ]] || continue
          svc=$(yq e '.service'  "$cfg")
          cmp=$(yq e '.compose'  "$cfg")
          services+=("$svc")
          composes+=("$cmp")
          echo "üõà  $dir ‚Üí service=$svc  compose=$cmp"
        done
        echo "services=${services[*]}"  >>"$GITHUB_OUTPUT"
        echo "composes=${composes[*]}"  >>"$GITHUB_OUTPUT"

    ##########################################################################
    # 4. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¢–û–õ–¨–ö–û –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è —Å–µ—Ä–≤–∏—Å—ã
    ##########################################################################
    - name: Deploy via SSH
      if: ${{ steps.cfg.outputs.services != '' }}
      env:
        SSH_KEY:   ${{ secrets.ssh_key }}
        SSH_USER:  ${{ secrets.deploy_user }}
        SSH_HOST:  ${{ secrets.server_ip }}
        SERVICES:  ${{ steps.cfg.outputs.services }}
        COMPOSES:  ${{ steps.cfg.outputs.composes }}
      run: |
        # ---------- –≥–æ—Ç–æ–≤–∏–º SSH ----------
        install -m 600 /dev/null ~/.ssh/id_rsa
        echo "$SSH_KEY" > ~/.ssh/id_rsa
        ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

        # ---------- —Ü–∏–∫–ª –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º ----------
        idx=1
        for svc in $SERVICES; do
          cmp=$(echo "$COMPOSES" | cut -d' ' -f $idx)
          echo "üöÄ  Deploying $svc  (compose dir: $cmp)"

          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" bash -s <<'EOSSH'
svc="$1" ; cmp="$2"
set -e
cd "$cmp"

if docker compose config --services | grep -qx "$svc"; then
  echo "‚Ä¢ build $svc"
  docker compose build "$svc"
  echo "‚Ä¢ up -d $svc"
  docker compose up -d "$svc"
else
  echo "‚ö†  Service '$svc' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ docker-compose.yml ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω."
fi
EOSSH "$svc" "$cmp"

          idx=$((idx+1))
        done