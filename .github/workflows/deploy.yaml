name: Deploy changed services
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    #------------------------------------------------------------------#
    # 1. берём код
    #------------------------------------------------------------------#
    - uses: actions/checkout@v3
      with: { fetch-depth: 0 }

    #------------------------------------------------------------------#
    # 2. какие верхние папки изменились
    #------------------------------------------------------------------#
    - id: folders
      name: Detect folders
      run: |
        base="$(git merge-base HEAD origin/main)"
        echo "list=$(git diff --name-only $base..HEAD \
                 | cut -d/ -f1 | sort -u | tr '\n' ' ')" >>"$GITHUB_OUTPUT"

    #------------------------------------------------------------------#
    # 3. собираем service/compose из deploy.yaml
    #------------------------------------------------------------------#
    - id: cfg
      name: Read deploy.yaml
      run: |
        pip install -q yq
        S=() C=()
        for d in ${{ steps.folders.outputs.list }}; do
          [ -f "$d/deploy.yaml" ] || continue
          S+=("$(yq e '.service'  $d/deploy.yaml)")
          C+=("$(yq e '.compose'  $d/deploy.yaml)")
        done
        echo "svc=${S[*]}" >>"$GITHUB_OUTPUT"
        echo "cmp=${C[*]}" >>"$GITHUB_OUTPUT"

    #------------------------------------------------------------------#
    # 4. деплой только изменённых сервисов
    #------------------------------------------------------------------#
    - name: Deploy
      if: ${{ steps.cfg.outputs.svc != '' }}
      env:
        SVC:      ${{ steps.cfg.outputs.svc }}
        CMP:      ${{ steps.cfg.outputs.cmp }}
        SSH_KEY:  ${{ secrets.ssh_key }}
        SSH_HOST: ${{ secrets.server_ip }}
        SSH_USER: ${{ secrets.deploy_user }}
      run: |
        mkdir -p ~/.ssh
        printf '%s\n' "$SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

        read -ra services <<<"$SVC"
        read -ra composes  <<<"$CMP"

        for i in "${!services[@]}"; do
          svc=${services[$i]}
          dir=${composes[$i]}
          echo "🚀  $svc   (dir: $dir)"

          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
              "$SSH_USER@$SSH_HOST" "
            cd '$dir' &&
            docker compose config --services | grep -qx '$svc' &&
            docker compose build '$svc' &&
            docker compose up -d  '$svc' ||
            echo '⚠  $svc not found in compose — skipped'
          "
        done