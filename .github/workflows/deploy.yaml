name: Deploy Changed Services
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # ---------- какие папки изменились ----------
    - name: Detect changed folders
      id: detect
      run: |
        git fetch origin main
        echo "folders=$(git diff --name-only HEAD^ HEAD | cut -d/ -f1 | sort -u | tr '\n' ' ')" >> $GITHUB_OUTPUT

    # ---------- читаем deploy.yml каждой изменённой папки ----------
    - name: Collect deploy configs
      id: cfg
      run: |
        pip install yq >/dev/null           # yaml-parser
        svcs=()
        comps=()
        for dir in ${{ steps.detect.outputs.folders }}; do
          if [[ -f "$dir/deploy.yml" ]]; then
            svc=$(yq '.service' "$dir/deploy.yml")
            cmp=$(yq '.compose' "$dir/deploy.yml")
            svcs+=("$svc")
            comps+=("$cmp")
            echo "Will deploy $svc (compose=$cmp)"
          fi
        done
        echo "services=${svcs[*]}"  >> $GITHUB_OUTPUT
        echo "composes=${comps[*]}" >> $GITHUB_OUTPUT

    # ---------- SSH и деплой ----------
    - name: Deploy each service
      env:
        SERVICES: ${{ steps.cfg.outputs.services }}
        COMPOSES: ${{ steps.cfg.outputs.composes }}
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

        # --- цикл по сервисам ---
        i=0
        for svc in $SERVICES; do
          cmp=$(echo $COMPOSES | cut -d' ' -f $((i+1)))
          echo "::group::Deploy $svc (compose file in $cmp)"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
              ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} << EOF
            set -e
            cd $cmp
            docker compose build $svc
            docker compose up -d   $svc
          EOF
          echo "::endgroup::"
          i=$((i+1))
        done